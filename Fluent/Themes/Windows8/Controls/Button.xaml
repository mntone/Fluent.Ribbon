<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
					xmlns:Fluent="clr-namespace:Fluent"
					xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
					xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
					mc:Ignorable="d">
	<ControlTemplate x:Key="RibbonButtonControlTemplate"
					 TargetType="{x:Type Fluent:Button}">
		<Border x:Name="border"
				Margin="1,0,0,0"
				BorderThickness="{TemplateBinding BorderThickness}">
			<StackPanel x:Name="stackPanel"
						Orientation="Vertical"
						d:LayoutOverrides="Width, Height">
				<ContentPresenter x:Name="iconImage"
								  Margin="3,2"
								  Width="32"
								  Height="32"
								  HorizontalAlignment="Center"
								  VerticalAlignment="Center"
								  Content="{Binding LargeIcon, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static Converters:StaticConverters.ObjectToImageConverter}}" />
				<Fluent:TwoLineLabel x:Name="controlLabel"
									 Text="{TemplateBinding Header}"
									 Style="{DynamicResource TwoLineLabelStyle}"
									 VerticalAlignment="Center"
									 Margin="2,0,2,0"/>
			</StackPanel>
		</Border>
		<ControlTemplate.Triggers>
			<Trigger Property="Size"
					 Value="Small">
				<Setter TargetName="border"
						Property="Margin"
						Value="1,1,0,0" />
				<Setter Property="Orientation"
						TargetName="stackPanel"
						Value="Horizontal" />
				<Setter Property="Visibility"
						TargetName="controlLabel"
						Value="Collapsed" />
				<Setter Property="Width"
						TargetName="iconImage"
						Value="16" />
				<Setter Property="Height"
						TargetName="iconImage"
						Value="16" />
				<Setter Property="Margin"
						TargetName="iconImage"
						Value="1,0,2,0" />
				<Setter Property="Content"
						TargetName="iconImage"
						Value="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static Converters:StaticConverters.ObjectToImageConverter}}" />
			</Trigger>
			<Trigger Property="Size"
					 Value="Middle">
				<Setter TargetName="border"
						Property="Margin"
						Value="1,1,0,0" />
				<Setter TargetName="stackPanel"
						Property="Orientation"
						Value="Horizontal" />
				<Setter Property="VerticalAlignment"
						TargetName="iconImage"
						Value="Center" />
				<Setter Property="Width"
						TargetName="iconImage"
						Value="16" />
				<Setter Property="Height"
						TargetName="iconImage"
						Value="16" />
				<Setter Property="Margin"
						TargetName="iconImage"
						Value="1,0,2,0" />
				<Setter Property="Content"
						TargetName="iconImage"
						Value="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static Converters:StaticConverters.ObjectToImageConverter}}" />
				<Setter Property="Margin"
						TargetName="controlLabel"
						Value="1" />
				<Setter Property="HasTwoLines"
						TargetName="controlLabel"
						Value="False" />
			</Trigger>
			<Trigger Property="IsPressed"
					 Value="True">
				<Setter Property="BorderBrush"
						TargetName="border"
						Value="{DynamicResource ButtonPressedBorderBrush}" />
				<Setter Property="Background"
						TargetName="border"
						Value="{DynamicResource ButtonPressedBackgroundBrush}" />
			</Trigger>
			<Trigger Property="IsEnabled"
					 Value="False">
				<Setter Property="Opacity"
						TargetName="iconImage"
						Value="0.5" />
				<Setter Property="Opacity"
						TargetName="controlLabel"
						Value="0.5" />
				<Setter Property="Effect"
						TargetName="iconImage">
					<Setter.Value>
						<Fluent:GrayscaleEffect />
					</Setter.Value>
				</Setter>
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver"
							   Value="True" />
					<Condition Property="IsPressed"
							   Value="False" />
					<Condition Property="IsEnabled"
							   Value="True" />
				</MultiTrigger.Conditions>
				<Setter Property="Background"
						TargetName="border"
						Value="{DynamicResource ButtonHoverBackgroundBrush}" />
				<Setter Property="BorderBrush"
						TargetName="border"
						Value="{DynamicResource ButtonHoverBorderBrush}" />

			</MultiTrigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<Style x:Key="RibbonButtonStyle"
		   TargetType="{x:Type Fluent:Button}">
		<Setter Property="Template"
				Value="{DynamicResource RibbonButtonControlTemplate}" />
		<Setter Property="Height"
				Value="69" />
		<Setter Property="Width"
				Value="Auto" />
		<Setter Property="Foreground"
				Value="{DynamicResource DefaultFontBrush}" />
		<Setter Property="BorderThickness"
				Value=".99" />
		<Setter Property="HorizontalAlignment"
				Value="Left" />
		<Style.Triggers>
			<Trigger Property="Size"
					 Value="Middle">
				<Setter Property="Height"
						Value="22" />
			</Trigger>
			<Trigger Property="Size"
					 Value="Small">
				<Setter Property="Height"
						Value="22" />
				<Setter Property="Width"
						Value="22" />
			</Trigger>
		</Style.Triggers>
	</Style>
</ResourceDictionary>