<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
					xmlns:Fluent="clr-namespace:Fluent"
					xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
					xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
					mc:Ignorable="d">
	<ControlTemplate x:Key="RibbonSplitButtonControlTemplate"
					 TargetType="{x:Type Fluent:SplitButton}">
		<ControlTemplate.Resources>
			<Style BasedOn="{StaticResource MenuSeparatorStyle}"
				   TargetType="{x:Type Separator}" />
		</ControlTemplate.Resources>
		<Grid Margin="1,0,0,0">
			<Border x:Name="PART_ButtonBorder"
					BorderThickness="{TemplateBinding BorderThickness}"
					Background="{DynamicResource TransparentBrush}"
					BorderBrush="{DynamicResource TransparentBrush}">
				<Grid x:Name="stackPanel"
					  Margin="-.99"
					  d:LayoutOverrides="Width, Height">
					<Grid.RowDefinitions>
						<RowDefinition x:Name="rowDefinition"
									   Height="38" />
						<RowDefinition Height="Auto" />
					</Grid.RowDefinitions>
					<Grid.ColumnDefinitions>
						<ColumnDefinition />
						<ColumnDefinition x:Name="columnDefinition"
										  Width="0" />
					</Grid.ColumnDefinitions>
					<Fluent:ToggleButton x:Name="PART_Button"
										 Command="{TemplateBinding Command}"
										 CommandParameter="{TemplateBinding CommandParameter}"
										 CommandTarget="{TemplateBinding CommandTarget}"
										 Style="{StaticResource InnerButtonStyle}"
										 LargeIcon="{Binding LargeIcon, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static Converters:StaticConverters.ObjectToImageConverter}}"
										 Icon="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static Converters:StaticConverters.ObjectToImageConverter}}"
										 IsEnabled="{TemplateBinding IsButtonEnabled}"
										 Header="{TemplateBinding Header}"
										 ToolTip="{TemplateBinding ToolTip}"
										 IsChecked="{Binding IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
										 IsDefinitive="{TemplateBinding IsDefinitive}"
										 CanAddToQuickAccessToolBar="{TemplateBinding CanAddButtonToQuickAccessToolBar}" />
					<Border x:Name="downBorder"
							Grid.Row="1"
							Margin="0,-1,0,0"
							BorderThickness="{TemplateBinding BorderThickness}">
						<Fluent:TwoLineLabel x:Name="controlLabel"
											 Text="{TemplateBinding Header}"
											 Style="{DynamicResource TwoLineLabelStyle}"
											 HorizontalAlignment="Center"
											 VerticalAlignment="Center"
											 Margin="2,-1,2,0"
											 HasGlyph="{TemplateBinding HasTriangle}" />
					</Border>
				</Grid>
			</Border>
			<Popup x:Name="PART_Popup"
				   Placement="Bottom"
				   IsOpen="{TemplateBinding IsDropDownOpen}"
				   AllowsTransparency="True"
				   Focusable="False"
				   PopupAnimation="Slide"
				   Margin="0,0,-4,0"
				   VerticalAlignment="Top">
				<Grid x:Name="DropDown">
					<Border x:Name="PART_DropDownBorder"
							MinWidth="{TemplateBinding ActualWidth}"
							SnapsToDevicePixels="True"
							Background="{DynamicResource ContextMenuBarBackgroundBrush}"
							BorderBrush="{DynamicResource ContextMenuBarBorderBrush}"
							BorderThickness="1"
							CornerRadius="1"
							d:LayoutOverrides="Width, Height">
						<Grid>
							<Rectangle Stroke="{DynamicResource ContextMenuBarBackgroundBrush}"
									   StrokeThickness=".99" />
							<Grid Margin="1"
								  HorizontalAlignment="Stretch"
								  VerticalAlignment="Top">
								<Grid.RowDefinitions>
									<RowDefinition Height="*" />
									<RowDefinition Height="Auto" />
								</Grid.RowDefinitions>
								<ScrollViewer x:Name="PART_ScrollViewer"
											  Style="{DynamicResource MenuScrollViewer}"
											  Margin="1"
											  MaxHeight="{TemplateBinding MaxDropDownHeight}"
											  SnapsToDevicePixels="True"
											  ScrollViewer.VerticalScrollBarVisibility="Auto"
											  ScrollViewer.HorizontalScrollBarVisibility="Hidden">
									<StackPanel x:Name="PART_MenuPanel"
												Orientation="Vertical"
												IsItemsHost="True"
												KeyboardNavigation.DirectionalNavigation="Cycle" />
								</ScrollViewer>
								<Border x:Name="resizeBorder"
										HorizontalAlignment="Stretch"
										VerticalAlignment="Top"
										Height="11"
										BorderBrush="{DynamicResource ContextMenuBarResizeBorderBrush}"
										BorderThickness="0,1,0,0"
										Grid.Row="1"
										CornerRadius="0,0,1,1"
										Background="{DynamicResource ContextMenuBarResizeBackgoundBrush}">
									<Grid>
										<Thumb x:Name="PART_ResizeVerticalThumb"
											   HorizontalAlignment="Stretch"
											   Margin="0,0,0,-90"
											   Width="Auto"
											   Height="10"
											   VerticalAlignment="Top"
											   Cursor="SizeNS"
											   Template="{DynamicResource ResizeVerticalThumbControlTemplate}" />
										<Thumb x:Name="PART_ResizeBothThumb"
											   HorizontalAlignment="Right"
											   Margin="0,0,0,-90"
											   Width="10"
											   Height="10"
											   VerticalAlignment="Top"
											   Cursor="SizeNWSE"
											   Template="{DynamicResource ResizeBothThumbControlTemplate}" />
									</Grid>
								</Border>
							</Grid>
						</Grid>
					</Border>
				</Grid>
			</Popup>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="ResizeMode"
					 Value="None">
				<Setter Property="Visibility"
						TargetName="resizeBorder"
						Value="Collapsed" />
			</Trigger>
			<Trigger Property="ResizeMode"
					 Value="Both">
				<Setter Property="Visibility"
						TargetName="PART_ResizeVerticalThumb"
						Value="Collapsed" />
				<Setter Property="Visibility"
						TargetName="PART_ResizeBothThumb"
						Value="Visible" />
				<Setter Property="Visibility"
						TargetName="resizeBorder"
						Value="Visible" />
			</Trigger>
			<Trigger Property="ResizeMode"
					 Value="Vertical">
				<Setter Property="Visibility"
						TargetName="PART_ResizeBothThumb"
						Value="Collapsed" />
				<Setter Property="Visibility"
						TargetName="PART_ResizeVerticalThumb"
						Value="Visible" />
				<Setter Property="Visibility"
						TargetName="resizeBorder"
						Value="Visible" />
			</Trigger>
			<Trigger Property="IsChecked"
					 Value="True">
				<Setter Property="BorderBrush"
						TargetName="PART_ButtonBorder"
						Value="{DynamicResource ButtonPressedBorderBrush}" />
				<Setter Property="Background"
						TargetName="PART_ButtonBorder"
						Value="{DynamicResource ButtonPressedBackgroundBrush}" />
			</Trigger>
			<Trigger Property="Size"
					 Value="Small">
				<Setter Property="Size"
						TargetName="PART_Button"
						Value="Small" />
				<Setter TargetName="rowDefinition"
						Property="Height"
						Value="*" />
				<Setter TargetName="columnDefinition"
						Property="Width"
						Value="13" />
				<Setter TargetName="downBorder"
						Property="Grid.Row"
						Value="0" />
				<Setter TargetName="downBorder"
						Property="Grid.Column"
						Value="1" />
				<Setter TargetName="downBorder"
						Property="Margin"
						Value="-1,0,0,0" />
				<Setter Property="Width"
						TargetName="controlLabel"
						Value="10" />
				<Setter Property="Text"
						TargetName="controlLabel"
						Value="" />
			</Trigger>
			<Trigger Property="Size"
					 Value="Middle">
				<Setter Property="Size"
						TargetName="PART_Button"
						Value="Middle" />
				<Setter TargetName="rowDefinition"
						Property="Height"
						Value="*" />
				<Setter TargetName="columnDefinition"
						Property="Width"
						Value="13" />
				<Setter TargetName="downBorder"
						Property="Grid.Row"
						Value="0" />
				<Setter TargetName="downBorder"
						Property="Grid.Column"
						Value="1" />
				<Setter TargetName="downBorder"
						Property="Margin"
						Value="-1,0,0,0" />
				<Setter Property="Width"
						TargetName="controlLabel"
						Value="10" />
				<Setter Property="Text"
						TargetName="controlLabel"
						Value="" />
			</Trigger>

			<Trigger Property="IsButtonEnabled"
					 Value="False">
				<Setter Property="IsEnabled"
						TargetName="PART_Button"
						Value="False" />
			</Trigger>
			<Trigger Property="IsEnabled"
					 Value="False">
				<Setter Property="IsEnabled"
						TargetName="PART_Button"
						Value="False" />
				<Setter Property="Opacity"
						TargetName="controlLabel"
						Value="0.5" />
			</Trigger>
			<Trigger Property="IsDropDownOpen"
					 Value="True">
				<Setter TargetName="PART_ButtonBorder"
						Property="BorderBrush"
						Value="{DynamicResource ButtonHoverBorderBrush}" />
				<Setter TargetName="downBorder"
						Property="BorderBrush"
						Value="{DynamicResource ButtonPressedBorderBrush}" />
				<Setter TargetName="downBorder"
						Property="Background"
						Value="{DynamicResource ButtonPressedBackgroundBrush}" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver"
							   Value="True"
							   SourceName="PART_Button" />
					<Condition Property="IsDropDownOpen"
							   Value="False" />
					<Condition Property="Size"
							   Value="Middle" />
				</MultiTrigger.Conditions>
				<Setter Property="BorderBrush"
						TargetName="downBorder"
						Value="{DynamicResource ButtonHoverBorderBrush}" />
				<Setter Property="BorderBrush"
						TargetName="PART_ButtonBorder"
						Value="{DynamicResource ButtonHoverBorderBrush}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver"
							   Value="True"
							   SourceName="PART_Button" />
					<Condition Property="IsDropDownOpen"
							   Value="False" />
					<Condition Property="Size"
							   Value="Small" />
				</MultiTrigger.Conditions>
				<Setter Property="BorderBrush"
						TargetName="downBorder"
						Value="{DynamicResource ButtonHoverBorderBrush}" />
				<Setter Property="BorderBrush"
						TargetName="PART_ButtonBorder"
						Value="{DynamicResource ButtonHoverBorderBrush}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver"
							   Value="True"
							   SourceName="PART_Button" />
					<Condition Property="IsDropDownOpen"
							   Value="False" />
				</MultiTrigger.Conditions>
				<Setter Property="BorderBrush"
						TargetName="PART_ButtonBorder"
						Value="{DynamicResource ButtonHoverBorderBrush}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver"
							   Value="True"
							   SourceName="downBorder" />
					<Condition Property="IsDropDownOpen"
							   Value="False" />
				</MultiTrigger.Conditions>
				<Setter Property="BorderBrush"
						TargetName="PART_ButtonBorder"
						Value="{DynamicResource ButtonHoverBorderBrush}" />
				<Setter Property="Background"
						TargetName="downBorder"
						Value="{DynamicResource ButtonHoverBackgroundBrush}" />
				<Setter Property="BorderBrush"
						TargetName="downBorder"
						Value="{DynamicResource ButtonHoverBorderBrush}" />
			</MultiTrigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<Style x:Key="RibbonSplitButtonStyle"
		   TargetType="{x:Type Fluent:SplitButton}">
		<Setter Property="Template"
				Value="{DynamicResource RibbonSplitButtonControlTemplate}" />
		<Setter Property="Height"
				Value="69" />
		<Setter Property="Width"
				Value="Auto" />
		<Setter Property="Foreground"
				Value="{DynamicResource DefaultFontBrush}" />
		<Setter Property="BorderThickness"
				Value=".99" />
		<Setter Property="HorizontalAlignment"
				Value="Left" />
		<Style.Triggers>
			<Trigger Property="Size"
					 Value="Middle">
				<Setter Property="Height"
						Value="22" />
			</Trigger>
			<Trigger Property="Size"
					 Value="Small">
				<Setter Property="Height"
						Value="22" />
				<Setter Property="Width"
						Value="34" />
			</Trigger>
		</Style.Triggers>
	</Style>

	<!--Inner Button Style (Button in SplitButton)-->
	<ControlTemplate x:Key="InnerButtonControlTemplate"
					 TargetType="{x:Type Fluent:ToggleButton}">
		<Border x:Name="border"
				BorderThickness="{TemplateBinding BorderThickness}"
				UseLayoutRounding="False">
			<StackPanel x:Name="stackPanel"
						Orientation="Vertical"
						d:LayoutOverrides="Width, Height">
				<ContentPresenter x:Name="iconImage"
								  Width="32"
								  Height="32"
								  HorizontalAlignment="Center"
								  VerticalAlignment="Center"
								  Content="{TemplateBinding LargeIcon}" />
				<Fluent:TwoLineLabel x:Name="controlLabel"
									 Style="{DynamicResource TwoLineLabelStyle}"
									 VerticalAlignment="Center"
									 Margin="0"
									 Template="{TemplateBinding Header}" />
			</StackPanel>
		</Border>
		<ControlTemplate.Triggers>
			<Trigger Property="IsPressed"
					 Value="True">
				<Setter Property="BorderBrush"
						TargetName="border"
						Value="{DynamicResource ButtonPressedBorderBrush}" />
				<Setter Property="Background"
						TargetName="border"
						Value="{DynamicResource ButtonPressedBackgroundBrush}" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver"
							   Value="True" />
					<Condition Property="IsPressed"
							   Value="False" />
					<Condition Property="IsEnabled"
							   Value="True" />
				</MultiTrigger.Conditions>
				<Setter Property="Background"
						TargetName="border"
						Value="{DynamicResource ButtonHoverBackgroundBrush}" />
				<Setter Property="BorderBrush"
						TargetName="border"
						Value="{DynamicResource ButtonHoverBorderBrush}" />
			</MultiTrigger>
			<Trigger Property="IsEnabled"
					 Value="False">
				<Setter Property="Opacity"
						TargetName="iconImage"
						Value="0.5" />
				<Setter Property="Effect"
						TargetName="iconImage">
					<Setter.Value>
						<Fluent:GrayscaleEffect />
					</Setter.Value>
				</Setter>
			</Trigger>
			<Trigger Property="Size"
					 Value="Small">
				<Setter Property="Orientation"
						TargetName="stackPanel"
						Value="Horizontal" />
				<Setter Property="Width"
						TargetName="iconImage"
						Value="16" />
				<Setter Property="Height"
						TargetName="iconImage"
						Value="16" />
				<Setter Property="Margin"
						TargetName="iconImage"
						Value="1,0,2,0" />
				<Setter Property="Content"
						TargetName="iconImage"
						Value="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}}" />
				<Setter TargetName="controlLabel"
						Property="Text"
						Value="" />
			</Trigger>
			<Trigger Property="Size"
					 Value="Middle">
				<Setter Property="Orientation"
						TargetName="stackPanel"
						Value="Horizontal" />
				<Setter Property="Width"
						TargetName="iconImage"
						Value="16" />
				<Setter Property="Height"
						TargetName="iconImage"
						Value="16" />
				<Setter Property="Margin"
						TargetName="iconImage"
						Value="1,0,2,0" />
				<Setter Property="Content"
						TargetName="iconImage"
						Value="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}}" />
				<Setter TargetName="controlLabel"
						Property="Margin"
						Value="1" />
				<Setter Property="HasTwoLines"
						TargetName="controlLabel"
						Value="False" />
			</Trigger>
			<Trigger Property="Size"
					 Value="Large">
				<Setter TargetName="controlLabel"
						Property="Text"
						Value="" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<Style x:Key="InnerButtonStyle"
		   TargetType="{x:Type Fluent:ToggleButton}">
		<Setter Property="Template"
				Value="{DynamicResource InnerButtonControlTemplate}" />
		<Setter Property="Height"
				Value="Auto" />
	</Style>
</ResourceDictionary>